#!/usr/bin/ruby -w
# requires you to have previously run:
# gem install dbi

require 'rubygems'
require 'dbi'
require 'trollop'

class Object
  # from Rails
  def blank?
    respond_to?(:empty?) ? empty? : !self
  end
  
  def prettify
    to_s
  end
  
  # this is for -i to write output in SQL format. using prepared statements when possible
  def sql_valuify
    nil? ? 'NULL' : "'#{to_s.gsub(/\\/, '\&\&').gsub(/'/, "''")}'"
  end
end

# prettify by Yahuda Katz
# http://stackoverflow.com/questions/1077346/ruby-round-float-to-int-if-whole-number
class Float
  def prettify
    to_i == self ? to_i : self
  end
end

module SchemaSleuth
  class TableData
    attr_accessor :name, :columns, :row_hash
  end
end


ORACLE_TABLE_NAMES_QUERY = 'select TABLE_NAME from USER_TABLES'
ORACLE_COLUMN_NAMES_QUERY = 'select column_name FROM all_tab_cols where table_name = \'$TABLE_NAME\''

EXAMPLE_TABLE_NAMES_QUERY = ORACLE_TABLE_NAMES_QUERY
EXAMPLE_COLUMN_NAMES_QUERY = ORACLE_COLUMN_NAMES_QUERY

opts = Trollop::options do
  version "Schema Sleuth 2.6.0 (c) 2010-2011 Gary S. Weaver"
  banner <<-EOS
  
  Finds related data in a database.

  Examples:
  
  
  MySQL:
  
  ssleuth -r DBI:Mysql:TESTDB:localhost -u jdoe -p secret -c user_id -e 1234
  
  Oracle:
  
  ssleuth -r DBI:OCI8://db.acme.org:1234/ACMETEST.WORLD -u jdoe -p secret -c user_id -e 1234
  
  Follow NEXT_USER_ID and PREV_USER_ID as if were USER_ID without displaying progress indicator:
  
  ssleuth -r DBI:OCI8://db.acme.org:1234/ACMETEST.WORLD -u jdoe -p secret -c user_id -e 1234 -q -x 'next_,prev_'
  
  Dump all data in tables (under maximum row count) to a list of inserts
  
  ssleuth -r DBI:OCI8://db.acme.org:1234/ACMETEST.WORLD -u jdoe -p secret -e 1234 -q -i -a -m
  
  Ignore tables ending in _LOG or _STAT
  
  ssleuth -r DBI:OCI8://db.acme.org:1234/ACMETEST.WORLD -u jdoe -p secret -c user_id -e 1234 -b ^\\(?\\!\\(\\(.*_LOG\\)\\|\\(.*_STAT\\)\\)\\)
  
  Custom:
  
  ssleuth -r DBI:OCI8://db.acme.org:1234/ACMETEST.WORLD -u jdoe -p secret -c user_id -e 1234 -t "#{EXAMPLE_TABLE_NAMES_QUERY}" -n "#{EXAMPLE_COLUMN_NAMES_QUERY}"

  
  Usage:
  
         ssleuth [options]
         
  where [options] are:
  
  EOS
  opt :driver_url, "DBI driver URL. e.g. DBI:OCI8://db.acme.org:1234/ACMETEST.WORLD", :short => 'r', :type => String
  opt :user, "database username. e.g. jdoe", :short => 'u', :type => String
  opt :password, "database password. e.g. secret", :short => 'p', :type => String
  opt :column_name, "column name (case-insensitive). e.g. user_id", :short => 'c', :type => String
  opt :value, "column value. e.g. 1234", :short => 'e', :type => String
  opt :table_names_query, "SQL query to use to get full listing of tables. e.g. \"#{EXAMPLE_COLUMN_NAMES_QUERY}\"", :short => 't', :type => String
  opt :column_names_query, "SQL query to use to get column names for a table. Substitute $TABLE_NAME for the table name. e.g. \"#{EXAMPLE_COLUMN_NAMES_QUERY}\"", :short => 'n', :type => String
  opt :generate_deletes, "output as delete statements", :short => 'l', :default => false
  opt :generate_inserts, "output as insert statements", :short => 'i', :default => false
  opt :generate_updates, "output as update statements", :short => 'w', :default => false
  opt :maximum_depth, "maximum depth", :short => 's', :default => 5
  opt :maximum_row_count, "maximum row count. Does not attempt to follow path if more than this many rows are found from a query. However, you can still get more than one row in result summaries, via multiple queries", :short => 'm', :default => 1000
  opt :likes, "value comparisons done as likes rather than equals", :default => false
  opt :column_name_partials_to_remove, "comma-delimited list of (case-insensitive) text to remove from column names when following path. e.g. to make next_user_id and user_id match, you'd specify -x 'next_'", :short => 'x', :type => String
  opt :table_pattern, "table names must match this regexp pattern be included, otherwise are excluded", :short => 'b', :type => String
  opt :all_data, "instead of following relationships, just output all table data", :short => 'a', :default => false
  opt :quiet, "quiet. does not output progress indicator", :short => 'q', :default => false
  opt :debug, "outputs debugging information", :short => 'd', :default => false
end

Trollop::die :driver_url, "must provide a DBI driver URL. e.g. DBI:OCI8://db.acme.org:1234/ACMETEST.WORLD" unless opts[:driver_url]
Trollop::die :user, "must provide a database username. e.g. jdoe" unless opts[:user]
Trollop::die :password, "must provide a atabase password. e.g. secret" unless opts[:password]
Trollop::die :value, "must provide a column value. e.g. 1234" unless (opts[:value] || opts[:all_data])
Trollop::die :maximum_depth, "maximum depth must be a positive integer. e.g. 5" unless opts[:maximum_depth].to_i >= 0
Trollop::die :maximum_row_count, "maximum row count must be greater than zero. e.g. 1000" unless opts[:maximum_row_count].to_i > 0
Trollop::die :quiet, "cannot run quietly in debug mode. Remove debug option" if opts[:quiet] && opts[:debug]

puts "DBI version: #{DBI::VERSION}" if opts[:debug]

if opts[:driver_url].upcase.match(/^DBI:OCI8/)
  # oracle
  opts[:table_names_query] = ORACLE_TABLE_NAMES_QUERY if opts[:table_names_query].blank?
  opts[:column_names_query] = ORACLE_COLUMN_NAMES_QUERY if opts[:column_names_query].blank?
else
  Trollop::die :table_names_query, "Please specify a table names query for this database." if opts[:table_names_query].blank?
  Trollop::die :column_names_query, "Please specify a column names query for this database." if opts[:column_names_query].blank?
end

if opts[:debug]
  opts.each do |key,val|
    puts "#{key}: #{val}"
  end
end

def sleuth(dbh, store, table_names, column_name, value, opts, excluded_data_pointers, stack, column_name_partials_to_remove)  
  if stack.size > opts[:maximum_depth].to_i
    if opts[:debug]
      puts "Stack size exceeded. Skipping..."
    elsif !(opts[:quiet])
      print 'O'
      STDOUT.flush
    end
    stack.pop
    return
  end
  
  table_names.each do |this_table_name|
    begin
      if !store[this_table_name]
        store[this_table_name] = SchemaSleuth::TableData.new 
        store[this_table_name].name = this_table_name
        puts "Table: #{this_table_name}" if opts[:debug]
        
        specific_column_names_query = String.new(opts[:column_names_query])
        specific_column_names_query['$TABLE_NAME'] = this_table_name
        last_query = specific_column_names_query
        if opts[:debug]
          puts specific_column_names_query 
        end
        column_names_rows = dbh.select_all(specific_column_names_query)
        store[this_table_name].columns = column_names_rows.collect {|column_names_row| column_names_row[0] }
        
        puts "Columns: #{store[this_table_name].columns.join(', ')}" if opts[:debug]
        store[this_table_name].row_hash = {}
      end
      
      store_table = store[this_table_name]
      
      store_table.columns.each do |this_column_name|
        capitalized_column_name_partial = String.new(this_column_name.upcase)
        column_name_partials_to_remove.each do |column_name_partial_to_remove|
          capitalized_column_name_partial.gsub!(column_name_partial_to_remove.upcase, '')
        end
        puts "Converted #{this_column_name} to #{capitalized_column_name_partial} for match" if opts[:debug]
        
        if column_name.nil? || (capitalized_column_name_partial.eql? column_name.upcase)
          if opts[:likes]
            count_query = "select count(#{this_column_name}) from #{this_table_name} where #{this_column_name} like ?"
          else
            count_query = "select count(#{this_column_name}) from #{this_table_name} where #{this_column_name}=?"
          end
          last_query = count_query
          count_row = dbh.select_one(count_query, value)
          if count_row[0] && count_row[0].to_i > opts[:maximum_row_count].to_i
            if opts[:debug]
              puts "skipping #{this_table_name}: (found #{count_row[0].to_i} rows matching, which exceeded maximum row count of #{opts[:maximum_row_count]}.)"
              puts ''
              puts ''
            elsif !(opts[:quiet])
              print 'M'
              STDOUT.flush
            end
          else
            if opts[:likes]
              data_query = "select * from #{this_table_name} where #{this_column_name} like ?"
            else
              data_query = "select * from #{this_table_name} where #{this_column_name}=?"
            end
            last_query = data_query
            clue_rows = dbh.select_all(data_query, value)
            
            if (clue_rows.size > 0)
              if opts[:debug]
                sorted_stack = stack.sort.join("\n")
                puts "Stack:\n#{sorted_stack}"
                puts ''
                puts ''
              end
              
              clue_rows.each do |clue_row|
                clue_row.collect{|x| x.prettify }
                row_data = clue_row.collect{|x| x.prettify.sql_valuify }
                unique_key = row_data.join(', ')
                store_table.row_hash[unique_key] = row_data
                if opts[:debug]
                  puts "Row: #{unique_key}"
                elsif !(opts[:quiet])
                  print '.'
                  STDOUT.flush
                end
              end
              
              clue_rows.each_with_index do |clue_row, clue_row_index|
                clue_row.each_with_index do |clue_row_column_value, clue_row_column_value_index|
                  if clue_row_column_value && clue_row_column_value.to_s.size > 0
                    clue_row_column_name = store_table.columns[clue_row_column_value_index]
                    data_pointer = "#{this_table_name}:#{clue_row.join(', ')}"
                    #data_pointer = "#{this_table_name}.#{clue_row_column_name}"
                    if !(excluded_data_pointers.include? data_pointer)
                      if opts[:debug]
                        sorted_list = excluded_data_pointers.sort.join("\n")
                        puts "#{data_pointer}\nnot found in:\n#{sorted_list}"
                        puts "Following #{data_pointer}"
                      end
                      
                      excluded_data_pointers << data_pointer
                      stack << "#{this_table_name}.#{clue_row_column_name} = '#{clue_row_column_value}'"
                  
                      sleuth(dbh, store, table_names, clue_row_column_name, clue_row_column_value, opts, excluded_data_pointers, stack, column_name_partials_to_remove)
                    end
                  end
                end
              end
            end
          end
        end
      end
      
    rescue Exception => e
      if !(opts[:quiet])
        puts "#{e.message}"
        eol = "\n"
        puts "#{e.backtrace.join(eol)}"
      end
    end
  end
  
  stack.pop
  return
end

def all_data(dbh, store, table_names, opts)  
  table_names.each do |this_table_name|
    begin
      store[this_table_name] = SchemaSleuth::TableData.new 
      store[this_table_name].name = this_table_name
      puts "Table: #{this_table_name}" if opts[:debug]
      
      specific_column_names_query = String.new(opts[:column_names_query])
      specific_column_names_query['$TABLE_NAME'] = this_table_name
      last_query = specific_column_names_query
      if opts[:debug]
        puts specific_column_names_query 
      end
      column_names_rows = dbh.select_all(specific_column_names_query)
      store[this_table_name].columns = column_names_rows.collect {|column_names_row| column_names_row[0] }
      puts "Columns: #{store[this_table_name].columns.join(', ')}" if opts[:debug]
      store[this_table_name].row_hash = {}
      
      store_table = store[this_table_name]
      if store_table.columns != nil && store_table.columns.size > 0
        count_query = "select count(#{store_table.columns[0]}) from #{this_table_name}"
        last_query = count_query
        count_row = dbh.select_one(count_query)
        if count_row[0] && count_row[0].to_i > opts[:maximum_row_count].to_i
          if opts[:debug]
            puts "skipping #{this_table_name}: (found #{count_row[0].to_i} rows matching, which exceeded maximum row count of #{opts[:maximum_row_count]}.)"
            puts ''
            puts ''
          elsif !(opts[:quiet])
            print 'M'
            STDOUT.flush
          end
        else
          data_query = "select #{store[this_table_name].columns.join(', ')} from #{this_table_name}"
          last_query = data_query
          clue_rows = dbh.select_all(data_query)
          
          if (clue_rows.size > 0)            
            clue_rows.each do |clue_row|
              clue_row.collect{|x| x.prettify }
              row_data = clue_row.collect{|x| x.prettify.sql_valuify }
              unique_key = row_data.join(', ')
              store_table.row_hash[unique_key] = row_data
              if opts[:debug]
                puts "Row: #{unique_key}"
              elsif !(opts[:quiet])
                print '.'
                STDOUT.flush
              end
            end
          end
        end
      end
      
    rescue Exception => e
      if !(opts[:quiet])
        puts "#{e.message}"
        eol = "\n"
        puts "#{e.backtrace.join(eol)}"
      end
    end
  end
  
  return
end

def output(store, opts)
  store.keys.sort.each do |store_key|
    table = store[store_key]
    if table.row_hash && table.row_hash.size > 0
      if opts[:generate_deletes] || opts[:generate_inserts] || opts[:generate_updates]
        table.row_hash.keys.sort.each do |row_key|
          row = table.row_hash[row_key]
          pairs = nil
          if opts[:generate_deletes] || opts[:generate_updates]
            pairs = []
            table.columns.each_with_index do |column, i|
              pairs[i] = "#{column} = #{row[i]}"
            end
          end
          
          puts "DELETE FROM #{table.name} WHERE #{pairs.join ' AND '};" if opts[:generate_deletes]
          puts "INSERT INTO #{table.name} (#{table.columns.join ', '}) VALUES (#{row.join ', '});" if opts[:generate_inserts]
          puts "UPDATE #{table.name} SET #{pairs.join ', '} WHERE #{pairs.join ' AND '};" if opts[:generate_updates]
        end
      else
        puts "#{table.name}"
        puts ''
        puts table.columns.join ', '
        puts '------------'

        table.row_hash.keys.sort.each do |row_key|
          row = table.row_hash[row_key]
          puts row.join ', '
        end
        puts ''
        puts ''
      end
    end
  end
end

begin
  dbh = DBI.connect(opts[:driver_url], opts[:user], opts[:password])

  if opts[:debug]
    # Note: dbh.trace fails in DBI 0.4.5: "the trace module has been removed until it actually works."
    # so we don't attempt to call it here.
    
    # get server version string and display it
    row = dbh.select_one('select version from v$instance')
    puts "Server version: #{row[0]}"
    puts ''
    puts opts[:table_names_query]
  end
  
  table_names_rows = dbh.select_all(opts[:table_names_query])
  puts "Tables: #{table_names_rows.inspect}" if opts[:debug]
  
  table_names = []
  table_names_rows.each do |table_name_row|
    if opts[:table_pattern].blank? || table_name_row[0].match(/#{opts[:table_pattern]}/)
      table_names << table_name_row[0]
    else
      puts "Excluded table '#{table_name_row[0]}' which didn't match pattern '#{opts[:table_pattern]}'" if opts[:debug]
    end
  end
  
  puts ''
  puts "Analyzing..." if opts[:debug]
  
  store = {}
  if opts[:all_data] == true
    all_data(dbh, store, table_names, opts)
  else
    column_name_partials_to_remove = opts[:column_name_partials_to_remove].blank? ? [] : opts[:column_name_partials_to_remove].split(',')
    sleuth(dbh, store, table_names, opts[:column_name], opts[:value], opts, [], [], column_name_partials_to_remove)
  end
  
  puts ''
  puts "Outputting..." if opts[:debug]
  
  if opts[:generate_inserts] && !opts[:quiet]
    puts 'Note: The following SQL may not work in your database. For example, you must ensure that the date format matches the format required in the target database. For MySQL, the default date/timestamp format is: \'YYYY-MM-DD\'/\'YYYY-MM-DD HH:mm:SS\'. For PostgreSQL, it is: date \'YYYY-MM-DD\'/timestamp \'YYYY-MM-DD HH:mm:SS\'. And Oracle\'s default date format is: \'DD-MON-YY\'.'
  end
  
  output(store, opts)
  
rescue DBI::DatabaseError => e
  if !(opts[:quiet])
    puts "An error occurred"
    puts "Error code: #{e.err}"
    puts "Error message: #{e.errstr}"
  end
ensure
  # disconnect from server
  dbh.disconnect if dbh
end

